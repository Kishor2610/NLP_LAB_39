# Name:Kishor More
# NLP ASSIGNMENT 4 (a)
# TITLE: Generating Unigrams,Bigrams and Trigrams in nltk (File).

from nltk import ngrams

def n_g(n):
    file = open("sample.txt")
    for i in file.readlines():
        cumulative = i
        sentences = i.split(".")
        counter = 0
        for sentence in sentences:
            print("For sentence", counter + 1, n ,"grams are: ")
            trigrams = ngrams(sentence.split(" "), n)
            for grams in trigrams:
                print(grams)
            counter += 1
            print()

print("Unigrams:")
n_g(1)
print("\nBigrams:")
n_g(2)
print("\nTrigrams:")
n_g(3)

#OUTPUTS
# Unigrams:
# For sentence 1 1 grams are: 
# ('Java',)
# ('is',)
# ('statically',)
# ('typed',)
# ('and',)
# ('also',)
# ('a',)
# ('strongly',)
# ('typed',)
# ('language',)

# For sentence 2 1 grams are: 
# ('In',)
# ('Java,',)
# ('each',)
# ('type',)
# ('of',)
# ('data',)
# ('(such',)
# ('as',)
# ('integer,',)
# ('character,',)
# ('hexadecimal,',)
# ('packed',)
# ('decimal,',)
# ('and',)
# ('so',)
# ('forth)',)
# ('is',)
# ('Predefined',)
# ('as',)
# ('part',)
# ('of',)
# ('the',)
# ('programming',)
# ('language',)

# For sentence 3 1 grams are: 
# ('',)
# ('All',)
# ('constants',)
# ('or',)
# ('variables',)
# ('defined',)
# ('for',)
# ('a',)
# ('given',)
# ('program',)
# ('must',)
# ('be',)
# ('described',)
# ('with',)
# ('one',)
# ('of',)
# ('the',)
# ('data',)
# ('types',)

# For sentence 4 1 grams are: 
# ('Boolean',)
# ('data',)
# ('type',)
# ('represents',)
# ('only',)
# ('one',)
# ('bit',)
# ('of',)
# ('information',)
# ('either',)
# ('true',)
# ('or',)
# ('false',)

# For sentence 5 1 grams are: 
# ('Which',)
# ('is',)
# ('intended',)
# ('to',)
# ('represent',)
# ('the',)
# ('two',)
# ('truth',)
# ('values',)
# ('of',)
# ('logic',)
# ('and',)
# ('Boolean',)
# ('algebra',)

# For sentence 6 1 grams are: 
# ('The',)
# ('size',)
# ('of',)
# ('the',)
# ('boolean',)
# ('data',)
# ('type',)
# ('is',)
# ('virtual',)
# ('machine-dependent',)

# For sentence 7 1 grams are: 
# ('',)
# ('Values',)
# ('of',)
# ('type',)
# ('boolean',)
# ('are',)
# ('not',)
# ('converted',)
# ('implicitly',)
# ('or',)
# ('explicitly',)
# ('(with',)
# ('casts)',)
# ('to',)
# ('any',)
# ('other',)
# ('type',)

# For sentence 8 1 grams are: 
# ('But',)
# ('the',)
# ('programmer',)
# ('can',)
# ('easily',)
# ('write',)
# ('conversion',)
# ('code',)

# For sentence 9 1 grams are: 
# ('',)


# Bigrams:
# For sentence 1 2 grams are: 
# ('Java', 'is')
# ('is', 'statically')
# ('statically', 'typed')
# ('typed', 'and')
# ('and', 'also')
# ('also', 'a')
# ('a', 'strongly')
# ('strongly', 'typed')
# ('typed', 'language')

# For sentence 2 2 grams are: 
# ('In', 'Java,')
# ('Java,', 'each')
# ('each', 'type')
# ('type', 'of')
# ('of', 'data')
# ('data', '(such')
# ('(such', 'as')
# ('as', 'integer,')
# ('integer,', 'character,')
# ('character,', 'hexadecimal,')
# ('hexadecimal,', 'packed')
# ('packed', 'decimal,')
# ('decimal,', 'and')
# ('and', 'so')
# ('so', 'forth)')
# ('forth)', 'is')
# ('is', 'Predefined')
# ('Predefined', 'as')
# ('as', 'part')
# ('part', 'of')
# ('of', 'the')
# ('the', 'programming')
# ('programming', 'language')

# For sentence 3 2 grams are: 
# ('', 'All')
# ('All', 'constants')
# ('constants', 'or')
# ('or', 'variables')
# ('variables', 'defined')
# ('defined', 'for')
# ('for', 'a')
# ('a', 'given')
# ('given', 'program')
# ('program', 'must')
# ('must', 'be')
# ('be', 'described')
# ('described', 'with')
# ('with', 'one')
# ('one', 'of')
# ('of', 'the')
# ('the', 'data')
# ('data', 'types')

# For sentence 4 2 grams are: 
# ('Boolean', 'data')
# ('data', 'type')
# ('type', 'represents')
# ('represents', 'only')
# ('only', 'one')
# ('one', 'bit')
# ('bit', 'of')
# ('of', 'information')
# ('information', 'either')
# ('either', 'true')
# ('true', 'or')
# ('or', 'false')

# For sentence 5 2 grams are: 
# ('Which', 'is')
# ('is', 'intended')
# ('intended', 'to')
# ('to', 'represent')
# ('represent', 'the')
# ('the', 'two')
# ('two', 'truth')
# ('truth', 'values')
# ('values', 'of')
# ('of', 'logic')
# ('logic', 'and')
# ('and', 'Boolean')
# ('Boolean', 'algebra')

# For sentence 6 2 grams are: 
# ('The', 'size')
# ('size', 'of')
# ('of', 'the')
# ('the', 'boolean')
# ('boolean', 'data')
# ('data', 'type')
# ('type', 'is')
# ('is', 'virtual')
# ('virtual', 'machine-dependent')

# For sentence 7 2 grams are: 
# ('', 'Values')
# ('Values', 'of')
# ('of', 'type')
# ('type', 'boolean')
# ('boolean', 'are')
# ('are', 'not')
# ('not', 'converted')
# ('converted', 'implicitly')
# ('implicitly', 'or')
# ('or', 'explicitly')
# ('explicitly', '(with')
# ('(with', 'casts)')
# ('casts)', 'to')
# ('to', 'any')
# ('any', 'other')
# ('other', 'type')

# For sentence 8 2 grams are: 
# ('But', 'the')
# ('the', 'programmer')
# ('programmer', 'can')
# ('can', 'easily')
# ('easily', 'write')
# ('write', 'conversion')
# ('conversion', 'code')

# For sentence 9 2 grams are: 


# Trigrams:
# For sentence 1 3 grams are: 
# ('Java', 'is', 'statically')
# ('is', 'statically', 'typed')
# ('statically', 'typed', 'and')
# ('typed', 'and', 'also')
# ('and', 'also', 'a')
# ('also', 'a', 'strongly')
# ('a', 'strongly', 'typed')
# ('strongly', 'typed', 'language')

# For sentence 2 3 grams are: 
# ('In', 'Java,', 'each')
# ('Java,', 'each', 'type')
# ('each', 'type', 'of')
# ('type', 'of', 'data')
# ('of', 'data', '(such')
# ('data', '(such', 'as')
# ('(such', 'as', 'integer,')
# ('as', 'integer,', 'character,')
# ('integer,', 'character,', 'hexadecimal,')
# ('character,', 'hexadecimal,', 'packed')
# ('hexadecimal,', 'packed', 'decimal,')
# ('packed', 'decimal,', 'and')
# ('decimal,', 'and', 'so')
# ('and', 'so', 'forth)')
# ('so', 'forth)', 'is')
# ('forth)', 'is', 'Predefined')
# ('is', 'Predefined', 'as')
# ('Predefined', 'as', 'part')
# ('as', 'part', 'of')
# ('part', 'of', 'the')
# ('of', 'the', 'programming')
# ('the', 'programming', 'language')

# For sentence 3 3 grams are: 
# ('', 'All', 'constants')
# ('All', 'constants', 'or')
# ('constants', 'or', 'variables')
# ('or', 'variables', 'defined')
# ('variables', 'defined', 'for')
# ('defined', 'for', 'a')
# ('for', 'a', 'given')
# ('a', 'given', 'program')
# ('given', 'program', 'must')
# ('program', 'must', 'be')
# ('must', 'be', 'described')
# ('be', 'described', 'with')
# ('described', 'with', 'one')
# ('with', 'one', 'of')
# ('one', 'of', 'the')
# ('of', 'the', 'data')
# ('the', 'data', 'types')

# For sentence 4 3 grams are: 
# ('Boolean', 'data', 'type')
# ('data', 'type', 'represents')
# ('type', 'represents', 'only')
# ('represents', 'only', 'one')
# ('only', 'one', 'bit')
# ('one', 'bit', 'of')
# ('bit', 'of', 'information')
# ('of', 'information', 'either')
# ('information', 'either', 'true')
# ('either', 'true', 'or')
# ('true', 'or', 'false')

# For sentence 5 3 grams are: 
# ('Which', 'is', 'intended')
# ('is', 'intended', 'to')
# ('intended', 'to', 'represent')
# ('to', 'represent', 'the')
# ('represent', 'the', 'two')
# ('the', 'two', 'truth')
# ('two', 'truth', 'values')
# ('truth', 'values', 'of')
# ('values', 'of', 'logic')
# ('of', 'logic', 'and')
# ('logic', 'and', 'Boolean')
# ('and', 'Boolean', 'algebra')

# For sentence 6 3 grams are: 
# ('The', 'size', 'of')
# ('size', 'of', 'the')
# ('of', 'the', 'boolean')
# ('the', 'boolean', 'data')
# ('boolean', 'data', 'type')
# ('data', 'type', 'is')
# ('type', 'is', 'virtual')
# ('is', 'virtual', 'machine-dependent')

# For sentence 7 3 grams are: 
# ('', 'Values', 'of')
# ('Values', 'of', 'type')
# ('of', 'type', 'boolean')
# ('type', 'boolean', 'are')
# ('boolean', 'are', 'not')
# ('are', 'not', 'converted')
# ('not', 'converted', 'implicitly')
# ('converted', 'implicitly', 'or')
# ('implicitly', 'or', 'explicitly')
# ('or', 'explicitly', '(with')
# ('explicitly', '(with', 'casts)')
# ('(with', 'casts)', 'to')
# ('casts)', 'to', 'any')
# ('to', 'any', 'other')
# ('any', 'other', 'type')

# For sentence 8 3 grams are: 
# ('But', 'the', 'programmer')
# ('the', 'programmer', 'can')
# ('programmer', 'can', 'easily')
# ('can', 'easily', 'write')
# ('easily', 'write', 'conversion')
# ('write', 'conversion', 'code')
